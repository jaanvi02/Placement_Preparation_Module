class Solution {
public:
    Node* segregate(Node* head) {
        if (!head || !head->next) {
            return head;
        }

        Node* zeroHead = new Node(0); // Dummy node for 0s
        Node* oneHead = new Node(0);  // Dummy node for 1s
        Node* twoHead = new Node(0);  // Dummy node for 2s
        Node* zeroTail = zeroHead;
        Node* oneTail = oneHead;
        Node* twoTail = twoHead;

        Node* curr = head;
        while (curr) {
            if (curr->data == 0) {
                zeroTail->next = curr;
                zeroTail = zeroTail->next;
            } else if (curr->data == 1) {
                oneTail->next = curr;
                oneTail = oneTail->next;
            } else if (curr->data == 2) {
                twoTail->next = curr;
                twoTail = twoTail->next;
            }
            curr = curr->next;
        }

        
        zeroTail->next = (oneHead->next) ? oneHead->next : twoHead->next;
        oneTail->next = twoHead->next;
        twoTail->next = nullptr;

     
        Node* newHead = zeroHead->next;

      
        delete zeroHead;
        delete oneHead;
        delete twoHead;

        return newHead;
    }
};
