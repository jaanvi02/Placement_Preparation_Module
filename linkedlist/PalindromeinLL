
class Solution {
public:
     ListNode* reverse(ListNode* head){
        if(head==NULL || !head->next){
            return head;
        }
        ListNode* newNode=reverse(head->next);
        head->next->next=head;
        head->next=NULL;
        return newNode;
            
    }
    bool isPalindrome(ListNode* head) {
        //find middle
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        slow->next=reverse(slow->next);
        slow=slow->next;
        cout<<slow->val;
        ListNode* temp=head;
        while(slow!=NULL){
            if(temp->val!=slow->val){
                return false;
            }
            temp=temp->next;
            slow=slow->next;
        }
        return true;
    }
};
