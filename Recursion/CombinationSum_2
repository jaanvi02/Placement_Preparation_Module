class Solution {
public:
    void solve(vector<int>& nums, int i, int target, vector<int>& v, vector<vector<int>>& ans) {
        if (target == 0) {
            ans.push_back(v);
            return;
        }
        if (i >= nums.size() || nums[i] > target || target < 0) {
            return;
        }
        for (int ind = i; ind < nums.size(); ind++) {
            // Skip duplicates
            if (ind > i && nums[ind - 1] == nums[ind]) {
                continue;
            }
            v.push_back(nums[ind]);
            solve(nums, ind + 1, target - nums[ind], v, ans);
            v.pop_back();
        }
        return;
    }
    
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end()); // Sort the input array to handle duplicates
        vector<int> v;
        vector<vector<int>> ans;
        solve(nums, 0, target, v, ans);
        return ans;
    }
};
