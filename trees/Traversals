#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int a){
        data=a;
        left=NULL;
        right=NULL;
    }
};
void traversal(Node* &root){
   queue<Node*>q;
   q.push(root);
   while(!q.empty()){
     
      int size=q.size();
      for(int i=0;i<size;i++){
          Node* top=q.front();
          
          q.pop();
          cout<<top->data<<" ";
           if(top->left){
          q.push(top->left);
      }
       if(top->right){
          q.push(top->right);
      }
          
          
      }
      cout<<endl;
   }
     
}
void preorder(Node* &root){
   stack<Node*>st;st.push(root);
   while(!st.empty()){
       Node* top=st.top();
       cout<<top->data<<" ";
       st.pop();
       if(top->right){
           st.push(top->right);
       }
       if(top->left){
           st.push(top->left);
       }
       
   }
}
void postorder(Node* & curr){
    stack<Node*>st;
 while(curr!=NULL || !st.empty()){
     if(curr!=NULL){
         st.push(curr);
         curr=curr->left;
     }
     else{
         Node* temp=st.top()->right;
         if(temp==NULL){
             Node* top=st.top();
             cout<<top->data;
             st.pop();
             while(!st.empty() && st.top()->right==top){
                 cout<<st.top()->data;
                 st.pop();
             }
             
         }
         else{
             curr=temp;
         }
     }
 }
}
      
void inorder(Node* &root){
 stack<Node*>q;
    // q.push(root);
   while(true){
       if(root!=NULL){
           q.push(root);
           root=root->left;
       }
       else{
           if(q.empty()) break;
           Node* top=q.top();
           q.pop();
           cout<<top->data;
           root=top->right;
           
           }
       
   }
}   





int main(){
Node* t= new Node(1);
t->left=new Node(2);
t->right=new Node(3);
t->left->left=new Node(4);
t->left->right=new Node(5);
// traversal(t);
// inorder(t);
postorder(t);
    
    return 0;
}

